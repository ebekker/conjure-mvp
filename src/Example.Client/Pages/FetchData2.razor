@page "/fetchdata2"
@using Example.Shared
@using Conjure.Controls.AgGrid
@using Conjure.Controls.Bound
@inject IWeatherForecastService Service

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@*@if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {*@

<div class="container-fluid">
    <EditForm Model="ScreenModel">
        <div class="row">
            <div class="col-md-9">
                <AgGrid @ref="theGrid" GetRowsHandler="GetRows" ItemSelected="RowSelected" HeightStyle="400px" WidthStyle="100%" Pagination="true" PaginationAutoPageSize="true">
                    <ColDef Sortable="true" Resizable="true" Field="date" Header="Date" />
                    <ColDef Sortable="true" Resizable="true" Field="temperatureC" Header="Celsius (°C)" />
                    <ColDef Sortable="true" Resizable="true" Field="temperatureF" Header="Fahrenheit (°F)" />
                    <ColDef Sortable="true" Resizable="true" Field="summary" Header="Summary" />
                </AgGrid>

            </div>
            <div class="col-md-3">
                <form>
                    <BoundInputDate Label="Date" ValueRoot="@ScreenModel" ValuePath="CurrentForecast.Date" Changed="ScreenModel.Refresh" />
                    <BoundInputDate Label="Date" ValueRoot="@ScreenModel" ValuePath="CurrentForecast.Date" Changed="ScreenModel.Refresh" ReadOnly="true"/>
                    <BoundInputNumber TInput="int?" Label="Temp (°C)" ValueRoot="@ScreenModel" ValuePath="CurrentForecast.TemperatureC" Changed="ScreenModel.Refresh" />
                    <BoundInputNumber TInput="int?" Label="Temp (°C)" ValueRoot="@ScreenModel" ValuePath="CurrentForecast.TemperatureC" Changed="ScreenModel.Refresh" ReadOnly="true" />
                    <BoundInputNumber TInput="int?" Label="Temp (°F)" ValueRoot="@ScreenModel" ValuePath="CurrentForecast.TemperatureF" ReadOnly="true" Changed="ScreenModel.Refresh" />
                    <BoundInputText Label="Summary" ValueRoot="@ScreenModel" ValuePath="CurrentForecast.Summary" Changed="ScreenModel.Refresh" />
                    <BoundInputText Label="Summary" ValueRoot="@ScreenModel" ValuePath="CurrentForecast.Summary" ReadOnly="true" Changed="ScreenModel.Refresh" />
                </form>
                <button type="button" @onclick="@UpdateSelection">Commit</button>
            </div>
        </div>
    </EditForm>
</div>

@*}*@

@code {
FetchData2Model ScreenModel { get; set; } = new FetchData2Model
{
    CurrentForecast = null,
};

AgGrid theGrid;

protected override void OnInit()
{
    ScreenModel.Refreshed += (s, e) => StateHasChanged();
}

public Dictionary<DateTime, WeatherForecast> EditedRows { get; set; } = new Dictionary<DateTime, WeatherForecast>();

async Task<GetRowsResult> GetRows(int? skip, int? take, SortModel sort)
{
    var options = new Conjure.Data.FetchOptions
    {
        Sort = sort?.ColId,
        Skip = skip,
        Take = take,
    };

    if ("desc".Equals(sort?.Sort, StringComparison.OrdinalIgnoreCase))
        options.Sort = "-" + options.Sort;


    var result = await Service.GetForecastAsync(options);

    var rows = result.Items.ToArray();
    foreach (var r in rows)
    {
        if (EditedRows.ContainsKey(r.Date))
        {

        }
    }

    return new GetRowsResult
    {
        Success = true,
        LastRow = result.TotalCount,
        BlockRows = result.Items.ToArray(),
    };
}

void RowSelected(string selJson)
{
    Console.WriteLine("SELECTED: " + selJson);
    var sel = JsonHelper.Parse<WeatherForecast[]>(selJson);

    if (sel?.Length > 0)
    {
        Console.WriteLine("SELECTED: " + sel[0].Date);
        Console.WriteLine("        : " + sel[0].Summary);
        ScreenModel.CurrentForecast = sel[0];
    }
    else
    {
        Console.WriteLine("UNSELECTED");
        ScreenModel.CurrentForecast = null;
    }
}

async Task UpdateSelection()
{
    if (ScreenModel.CurrentForecast != null)
    {
        var updatedJson = JsonHelper.ToString<WeatherForecast[]>(new[] { ScreenModel.CurrentForecast });
        await theGrid.UpdateSelection(updatedJson);
    }
}

}
