@page "/fetchdata2"
@using Example.Shared
@using Conjure.Controls.AgGrid
@inject IWeatherForecastService Service

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@*@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{*@

<div class="container-fluid">
    <EditForm Model="ScreenModel">
        <div class="row">
            <div class="col-md-9">
                <AgGrid GetRowsHandler="GetRows" ItemSelected="RowSelected" HeightStyle="400px" WidthStyle="100%" Pagination="true" PaginationAutoPageSize="true">
                    <ColDef Sortable="true" Resizable="true" Field="date" Header="Date" />
                    <ColDef Sortable="true" Resizable="true" Field="temperatureC" Header="Celsius (°C)" />
                    <ColDef Sortable="true" Resizable="true" Field="temperatureF" Header="Fahrenheit (°F)" />
                    <ColDef Sortable="true" Resizable="true" Field="summary" Header="Summary" />
                </AgGrid>

            </div>
            <div class="col-md-3">

                <form>
                    <div class="form-group">
                        <label for="wfDate">Date:</label>
                        <InputDate Id="wfDate" class="form-control" @bind-Value="ScreenModel.CurrentForecast.Date" readonly />
                    </div>
                    <div class="form-group">
                        <label for="wfTempC">Temperature (°C):</label>
                        <InputNumber Id="wfTempC" class="form-control" @bind-Value="ScreenModel.CurrentForecast.TemperatureC" readonly />
                    </div>
                </form>

                <form>
                    <div class="form-group">
                        <label for="wfTempF">Temperature (°F):</label>
                        <input type="text" id="wfTempF" class="form-control" @value="_current.TemperatureF" readonly />
                    </div>
                    <div class="form-group">
                        <label for="wfSummary">Summary:</label>
                        <InputText Id="wfSummary" class="form-control" @bind-Value="ScreenModel.CurrentForecast.Summary" readonly />
                    </div>
                </form>
            </div>
        </div>
    </EditForm>
</div>

@*}*@

@code {
//IEnumerable<WeatherForecast> forecasts;

//protected override async Task OnInitAsync()
//{
//    forecasts = (await Service.GetForecastAsync(null, null, 0, 10)).pageRows;
//}

//Task<GetRowsResult> LocalGetRows(int? skip, int? take, SortModel sort)
//{
//    var rows = forecasts;

//    if (skip.HasValue)
//        rows = rows.Skip(skip.Value);
//    if (take.HasValue)
//        rows = rows.Take(take.Value);
//    if (sort != null)
//    {
//        // We ignore case since default JSON serialization will lowercase the
//        // first letter and so the ColId won't match its origin property otherwise
//        var p = typeof(WeatherForecast).GetProperty(sort.ColId, System.Reflection.BindingFlags.IgnoreCase
//            | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);

//        if (sort.Sort == "desc")
//            rows = rows.OrderByDescending(x => p.GetValue(x));
//        else
//            rows = rows.OrderBy(x => p.GetValue(x));
//    }

//    return Task.FromResult(new GetRowsResult
//    {
//        Success = true,
//        LastRow = forecasts.Count(),
//        BlockRows = rows.ToArray(),
//    });
//}

FetchData2Model ScreenModel { get; set; } = new FetchData2Model
{
    CurrentForecast = new WeatherForecast(),
};

//WeatherForecast _current = new WeatherForecast();

async Task<GetRowsResult> GetRows(int? skip, int? take, SortModel sort)
{
    var sortBy = sort?.ColId;
    var sortDesc = "desc".Equals(sort?.Sort, StringComparison.OrdinalIgnoreCase);

    var result = await Service.GetForecastAsync(sortBy, sortDesc, skip, take);

    return new GetRowsResult
    {
        Success = true,
        LastRow = result.TotalCount,
        BlockRows = result.PageItems.ToArray(),
    };
}

void RowSelected(string selJson)
{
    Console.WriteLine("SELECTED: " + selJson);
    var sel = JsonHelper.Parse<WeatherForecast[]>(selJson);

    if (sel?.Length > 0)
    {
        Console.WriteLine("SELECTED: " + sel[0].Date);
        Console.WriteLine("        : " + sel[0].Summary);
        ScreenModel.CurrentForecast = sel[0];
    }
    else
    {
        Console.WriteLine("UNSELECTED");
        ScreenModel.CurrentForecast = null;
    }
}

}
