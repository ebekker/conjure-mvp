@using Microsoft.JSInterop
@inject IJSRuntime JS
@implements IDisposable
IAsyncDisposable

<CascadingValue Value="@colDefs">@ChildContent</CascadingValue>
<div id="@gridId" style="height: @(HeightStyle); width: @(WidthStyle);"
     class="ag-theme-balham"
     classX="ag-theme-bootstrap"
     ></div>

<button type="button" @onclick="@DumpSelection">Get Selection</button>

@code {

[Parameter] Func<int?, int?, SortModel, Task<GetRowsResult>> GetRowsHandler { get; set; }
[Parameter] RenderFragment ChildContent { get; set; }
[Parameter] EventCallback<string> ItemSelected { get; set; }
[Parameter] string HeightStyle { get; set; } = "500px";
[Parameter] string WidthStyle { get; set; } = "500px";

[Parameter] bool? Pagination { get; set; }
[Parameter] int? PaginationPageSize { get; set; }
[Parameter] bool? PaginationAutoPageSize{ get; set; }

string gridId = $"grid-{Guid.NewGuid()}";
List<ColumnDefinition> colDefs = new List<ColumnDefinition>();
bool gridRendered = false;

protected override Task OnAfterRenderAsync()
{
    return RenderGrid();
}

protected async Task RenderGrid()
{
    if (gridRendered)
        return;

    gridRendered = true;

    var gridOptions = new Dictionary<string, object>
    {
        ["columnDefs"] = colDefs.ToArray(),
    };

    if (Pagination.HasValue) { gridOptions["pagination"] = Pagination.Value; }
    if (PaginationPageSize.HasValue) { gridOptions["paginationPageSize"] = PaginationPageSize.Value; }
    if (PaginationAutoPageSize.HasValue) { gridOptions["paginationAutoPageSize"] = PaginationAutoPageSize.Value; }

    var thisRef = DotNetObjectRef.Create(this);
    await JS.InvokeAsync<object>("createGrid", thisRef, gridId, gridOptions);
}

[JSInvokable]
public async Task<GetRowsResult> GetRows(int? startRow, int? endRow, SortModel[] sorts
    , string filter)
{
    var sort = sorts?.Length > 0 ? sorts[0] : null;

    Console.WriteLine($"Getting Rows: {startRow}, {endRow}, JSON({sort?.ColId},{sort?.Sort}), {filter}");

    return await GetRowsHandler(startRow, endRow, sort);
}

[JSInvokable]
public async Task SelectionChanged(string itemsJson)
{
    await ItemSelected.InvokeAsync(itemsJson);
}

public async Task UpdateSelection(string itemsJson)
{
    await JS.InvokeAsync<object>("updateGridSelection", gridId, itemsJson);
}

protected void DumpSelection()
{
    Console.WriteLine("Dumping...");
    JS.InvokeAsync<object>("dumpSelection", gridId);
}

void IDisposable.Dispose()
{
    Console.WriteLine("Disposing AgGrid: " + gridId);
    JS.InvokeAsync<object>("gridDispose", gridId);
}
}
