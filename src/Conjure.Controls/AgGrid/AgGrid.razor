@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject System.Net.Http.HttpClient Http

<CascadingValue Value="@colDefs">@ChildContent</CascadingValue>
<div id="@gridId" style="height: 50%; width: 80%;" class="ag-theme-balham"></div>

@code {

[Parameter] Func<int?, int?, SortModel, Task<GetRowsResult>> GetRowsHandler { get; set; }
[Parameter] RenderFragment ChildContent { get; set; }
[Parameter] EventCallback<string> ItemSelected { get; set; }


string gridId = $"grid-{Guid.NewGuid()}";
List<ColumnDefinition> colDefs = new List<ColumnDefinition>();
bool gridRendered = false;

protected override Task OnAfterRenderAsync()
{
    return RenderGrid();
}

protected Task RenderGrid()
{
    if (gridRendered)
        return Task.CompletedTask;

    gridRendered = true;

    var gridOptions = new
    {
        columnDefs = colDefs.ToArray(),
    };

    var thisRef = DotNetObjectRef.Create(this);
    JS.InvokeAsync<object>("createGrid", thisRef, gridId, gridOptions);
    return Task.CompletedTask;

}

[JSInvokable]
public async Task<GetRowsResult> GetRows(int? startRow, int? endRow, SortModel[] sorts
    , string filter)
{
    var sort = sorts?.Length > 0 ? sorts[0] : null;

    Console.WriteLine($"Getting Rows: {startRow}, {endRow}, JSON({sort?.ColId},{sort?.Sort}), {filter}");

    return await GetRowsHandler(startRow, endRow, sort);
}

[JSInvokable]
public async Task SelectionChanged(string itemsJson)
{
    await ItemSelected.InvokeAsync(itemsJson);
}
}
